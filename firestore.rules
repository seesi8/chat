rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

  	match /threads/{document}/messages/{message}{
    	allow read: if request.auth != null && canReadMessage();
      allow create, update: if canMessage();

    	function canReadMessage(){
    		let isInDocument = request.auth.uid in get(/databases/$(database)/documents/threads/$(document)).data.members;
    		return isInDocument;
    	}
    }

    match /threads/{document} {
      allow create, update:  if request.auth != null && canThread();
      allow read: if request.auth != null && canInteract();
    }

  	match /users/{document}{
    	allow read: if request.auth != null;
      allow create: if request.auth != null && validUser();
      allow update: if request.auth != null && validUserUpdate();
    }

    match /threadsId/{document}{
    	allow read;
      allow create, update: if canWriteThreadID();
    }

    match /usernames/{document}{
      allow read;
      allow create: if request.auth != null && validUsername();
    }


    function validUserUpdate(){
      let hadFeilds = request.resource.data.keys().hasAll(['displayName', 'username', 'profileIMG', 'email', 'creationDate', 'lastActive', 'friends']);
      let validDate = request.resource.data.creationDate.date() == request.time.date() && request.resource.data.lastActive.date() == request.time.date();
      let isUser = request.auth.uid == request.resource.id;
      return hadFeilds && isUser && validDate;
    }

    function validUser(){
      let hadFeilds = request.resource.data.keys().hasAll(['displayName', 'username', 'profileIMG', 'email', 'creationDate', 'lastActive', 'friends']);
      let validDate = request.resource.data.creationDate.date() == request.time.date() && request.resource.data.lastActive.date() == request.time.date();
      let isUser = request.auth.uid == request.resource.id;
      let createdUsernameDoc = existsAfter(/databases/$(database)/documents/usernames/$(request.resource.data.username));
      let isValidUsername = exists(/databases/$(database)/documents/usernames/$(request.resource.data.username)) == false;
      return hadFeilds && isValidUsername && isUser && validDate && createdUsernameDoc;
    }

    function validUsername(){
      let isOwner = request.auth.uid == request.resource.data.uid;
      let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == request.resource.id;
      return isValidUserDoc && isOwner;
    }

    function canMessage(){
      let validDate = request.resource.data.timeSent.date() == request.time.date();
      let hadFeilds = request.resource.data.keys().hasAll(['message', 'timeSent', 'sentBy']);
      let validUser = request.resource.data.sentBy.user == request.auth.uid;
      return validUser && validDate && hadFeilds;
    }

    function canThread(){
    	let validDate = request.resource.data.createdAt.date() <= request.time.date() && request.resource.data.latestMessage.date() == request.time.date();
      let isInMembers = request.auth.uid in request.resource.data.members;
      let hadFeilds = request.resource.data.keys().hasAll(['members', 'groupName', 'createdAt', 'latestMessage']);
      return isInMembers && hadFeilds && validDate;
    }

    function canWriteThreadID()
    {
      let hadFeilds = request.resource.data.keys().hasAll(['id', 'members']);
      let isInMembers = request.auth.uid in request.resource.data.members;
      let idMatch = request.resource.id == request.resource.data.id;
      let matchUID = getAfter(/databases/$(database)/documents/threads/$(request.resource.id)).id == request.resource.id;
      let matchMembers = getAfter(/databases/$(database)/documents/threads/$(request.resource.id)).data.members == request.resource.data.members; 
      return matchMembers && matchUID && idMatch && isInMembers && hadFeilds;
    }

    function canInteract(){
      let isInDocument = request.auth.uid in get(request.path).data.members;

      return isInDocument;
    }
  }
}
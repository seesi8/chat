import Head from 'next/head'
import Image from 'next/image'
import Header from '../components/header'
import styles from '../styles/Home.module.css'
import { auth } from '../lib/firebase';
import Login from '../components/login'
import { firestore } from '../lib/firebase';
import { getAuth, onAuthStateChanged } from "firebase/auth";
import { collection, doc, getDoc } from "firebase/firestore";
import { useContext, useEffect, useState } from 'react';
import { UserContext } from '../lib/context';
import { useUserData } from '../lib/hooks';
import { uuidv4 } from "@firebase/util";
import { firstore } from '../lib/firebase'
import Link from 'next/link';
import { set } from 'react-hook-form';

function Thread(thread) {
  const [threadData, setThreadData] = useState(thread.thread)

  return (
    <Link href={threadData.id ? threadData.id : "/"}>
      <button className={styles.thread}>
        <h1 className={styles.threadTitle}>{threadData.groupName ? threadData.groupName : ""}</h1>
      </button>
    </Link>
  )
}

export default function Home() {

  const { user, data } = useContext(UserContext)

  const [threads, setThreads] = useState(data && data.threads)


  const loadThreads = async () => {
    if (!data || !user) return
    const localThreads = []
    console.log(user.uid, data.threads)
    for(let i in data.threads){
      console.log(i)
      let docData = (await getDoc(doc(firestore, "threads" , data.threads[i]))).data()
      docData.id = data.threads[i]
      console.log("thing " + i)
      localThreads.push(docData)
    }
    console.log("done")
    localThreads.sort((a, b) => (a.latestMessage < b.latestMessage ? 1 : -1))
    setThreads(localThreads)
  }

  
  useEffect(() => {
    loadThreads()
  }, [data])

  if (!user) {
    return (
      <Login />
    )
  }

  return (

    <div className={styles.container}>
      <Head>
        <title>Your Feed</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.threadsContainer}>
        <h1 className={styles.threadsTitle}>Threads</h1>
        {threads &&
          threads.map((el) =>
            <Thread key={uuidv4()} thread={el} />
          )
        }
      </main>
    </div>
  )
}

